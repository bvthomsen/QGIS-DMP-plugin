# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DMPManager
                                 A QGIS plugin
 Manage data from Danmarmarks Milj√∏portal (DMP)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-12-08
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Bo Victor Thomsen, AestasGIS Danmark
        email                : bvt@aestas.dk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
import webbrowser
import copy

from PyQt5.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QDateTime
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction
from qgis.core import QgsProject, QgsProviderRegistry, QgsDataSourceUri
#  , \
#  QgsAbstractProviderConnection
from qgis.gui import QgsFileWidget
from .resources import *
from .helper import tr, trInit, logI, logW, logC, messI, messW, messC, \
    read_config, write_config, handleRequest, mapperExtent, createDateTimeName, \
    loadLayer, createGroup, addLayer2Tree, createMemLayer, createRequestLog, \
    copyLayer2Layer
from .dmp_manager_dockwidget import DMPManagerDockWidget


class DMPManager:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DMPManager_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        trInit('DMPManager')

        # Declare instance attributes
        self.actions = []

        self.menu = tr(u'&DMP Manager')
        self.toolbar = self.iface.addToolBar(u'DMPManager')
        self.toolbar.setObjectName(u'DMPManager')

        #print "** INITIALIZING DMPManager"

        self.pluginIsActive = False
        self.dockwidget = None
        self.parm = None
        self.attributes = None

    def add_action(self, icon_path, text, callback, enabled_flag=True, add_to_menu=True,
                   add_to_toolbar=True, status_tip=None, whats_this=None, parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/dmp_manager/icon.png'
        self.add_action(
            icon_path,
            text=tr(u'DMP Manager'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        for action in self.actions:
            self.iface.removePluginWebMenu(
                tr(u'&DMP Manager'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            if self.dockwidget is None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = DMPManagerDockWidget()

            # Connect signals and slots for dockwidget
            sd = self.dockwidget
            sd.pbReset.clicked.connect(self.pbResetClicked)
            sd.pbSave.clicked.connect(self.pbSaveClicked)
            sd.leToken.textChanged.connect(self.leTokenTextChanged)
            sd.pbReqToken.clicked.connect(self.pbReqTokenClicked)
            sd.pbPrefLayer.clicked.connect(self.pbPrefLayerClicked)
            sd.pbRefresh.clicked.connect(self.pbRefreshClicked)
            sd.pbDownload.clicked.connect(self.pbDownloadClicked)
            sd.rbDatabase.toggled.connect(self.rbDatabaseToggled)
            sd.cbFiletype.currentIndexChanged.connect(self.cbFileTypeCurrentIndexChanged)

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

            # Set initial values
            self.pbResetClicked()

    def pbResetClicked(self):
        """Reread configuration json file and set the self.parm dict"""

        self.parm = read_config(os.path.join(self.plugin_dir, 'configuration.json'))
        self.attributes = read_config(os.path.join(self.plugin_dir, 'attributes.json'))

        sd = self.dockwidget
        spv = self.parm["Values"]
        spd = self.parm["Data"]

        sd.leCVRNo.setText(str(spv["CVR number"]))
        sd.lePrefLayer.setText(spv["Preferred layer"])
        sd.chbMapExtent.setChecked(spv["Use extent"])
        sd.leToken.setText(spv["Token value"])
        sd.dtTimeout.setDateTime(QDateTime().fromString(spv["Token time"], Qt.ISODate))

        self.loadCbDownload()

        if spd["Use database"]:
            sd.rbDatabase.setChecked(True)
            #sd.rbDirectory.setChecked(False)
        else:
            #sd.rbDatabase.setChecked(False)
            sd.rbDirectory.setChecked(True)

        self.loadCbDatabase(spd["Database"])
        sd.leSchema.setText(spd["Schema"])
        sd.fwDirectory.setFilePath(spd["Directory"] if spd["Directory"] != '' else os.path.expanduser("~"))

        self.loadCbFiletype(spd["Filetypes"], spd["Use filetype"])

    def pbSaveClicked(self):
        """Save values from several subwidgets into the self.parm dictionary and save it
        permanently into json file"""

        sd = self.dockwidget
        spv = self.parm["Values"]
        spd = self.parm["Data"]

        spv["CVR number"] = int(sd.leCVRNo.text())
        spv["Preferred layer"] = sd.lePrefLayer.text()
        spv["Use extent"] = sd.chbMapExtent.isChecked()
        spv["Token value"] = sd.leToken.text()
        spv["Token time"] = sd.dtTimeout.dateTime().toString(Qt.ISODate)

        spd["Use database"] = sd.rbDatabase.isChecked()
        spd["Database"] = sd.cbDatabase.currentText()
        spd["Schema"] = sd.leSchema.text()
        spd["Directory"] = sd.fwDirectory.filePath()
        spd["Use filetype"] = sd.cbFiletype.itemData(sd.cbFiletype.currentIndex())

        write_config(os.path.join(self.plugin_dir, 'configuration.json'), self.parm)
        write_config(os.path.join(self.plugin_dir, 'attributes.json'), self.attributes)

    def leTokenTextChanged(self, txt):
        """Set timeout parameter for token (current time + 1 hour)"""

        sd = self.dockwidget
        sd.dtTimeout.setDateTime(QDateTime.currentDateTime().addSecs(3500))  # "N√¶sten" 1 time

    def pbReqTokenClicked(self):
        """HTTP request to generate access ticket and token for DMP"""

        #sd = self.dockwidget
        spa = self.parm["Access"]
        webbrowser.open(spa['Logon'])

    def pbPrefLayerClicked(self):
        """Change preferred layerid to current value from cbDownload combobox item value"""

        sd = self.dockwidget
        spv = self.parm["Values"]

        ci = sd.cbDownload.currentIndex()
        if ci >= 0:
            spv["Preferred layer"] = sd.cbDownload.currentText()
            sd.lePrefLayer.setText(spv["Preferred layer"])

    def pbRefreshClicked(self):
        """Fetch all layer names and other information from DMP"""

        if self.checkToken():

            sa = self.attributes
            sd = self.dockwidget
            spa = self.parm["Access"]
            spc = self.parm["Commands"]

            # Create header information for requests
            headers = copy.deepcopy(spa['Headers'])
            headers['Authorization'] = headers['Authorization'].format(sd.leToken.text())
            # logI(str(headers))
            url = spa['Address'] + spc['temakoder']
            # logI(url)
            #status, result = handleRequest(url, False, headers, None, None, '', 'dmptest')
            status, result = handleRequest(url, False, {"accept": "application/vnd.api+json"}, None, None, '', 'dmptest')
            if status == 200:
                sa['temakoder'] = result['data']
                self.loadCbDownload()
                messI('Download of {} done'.format('temakoder'))
            else:
                messC('Error {} for download of {}'.format(status, 'temakoder'))

            url = spa['Address'] + spc['attributter']
            # logI(url)
            #status, result = handleRequest(url, False, headers, None, None, '', 'dmptest')
            status, result = handleRequest(url, False, {"accept": "application/vnd.api+json"}, None, None, '', 'dmptest')
            if status == 200:
                sa['attributter'] = result['data']
                messI('Download of {} done'.format('attributter'))
            else:
                messC('Error {} for download of {}'.format(status, 'attributter'))

            url = spa['Address'] + spc['temaattributter'] + spc['temaattributfilter 1']
            # logI(url)
            #status, result = handleRequest(url, False, headers, None, None, '', 'dmptest')
            status, result = handleRequest(url, False, {"accept": "application/vnd.api+json"}, None, None, '', 'dmptest')
            if status == 200:
                sa['temaattributter'] = result['data']
                messI('Download of {} done'.format('temaattributter'))
            else:
                messC('Error {} for download of {}'.format(status, 'temaattributter'))

    def checkToken(self):
        """Check if token still is valid (not to old)"""

        #sd = self.dockwidget
        #spa = self.parm["Access"]
        #if sd.dtTimeout.dateTime() < QDateTime.currentDateTime():
        #    # Missing code to start openId process....
        #    messW('Timeout for token - refresh token using logon at DMP')
        #    webbrowser.open(spa['Logon'])
        #    return False

        return True

    def loadCbDownload(self):
        """Load cbDownload combobox from attributes dict"""

        sa = self.attributes
        sd = self.dockwidget

        sd.cbDownload.clear()

        for d in sa['temakoder']:
            itm = d['attributes']
            itm['id'] = d['id']
            sd.cbDownload.addItem(d['id'] + ' - ' + d['attributes']['title'], itm)

        pref = '' if sd.lePrefLayer.text() is None else sd.lePrefLayer.text()
        if pref != "":
            sd.cbDownload.setCurrentIndex(sd.cbDownload.findText(pref))


    def createUriDict(self, tname, gname = 'geom', pkname='objekt-id'):

        sd = self.dockwidget
        
        udict = {}

        # find/check connectype and connection information
        if sd.rbDatabase.isChecked():
    
            # Database based local repository
            if sd.cbDatabase.currentIndex() >= 0 and sd.leSchema.text() != '':

                setting = sd.cbDatabase.itemData(sd.cbDatabase.currentIndex())
                metadata = QgsProviderRegistry.instance().providerMetadata(setting[0])
                connection = metadata.findConnection(setting[1])
                uri = QgsDataSourceUri(connection.uri())
                uri.setSchema(sd.leSchema.text())

                udict['uri']= uri
                udict['gname'] = gname
                udict['pkname'] = pkname
                udict['tname'] = tname
                udict['contype'] = setting[0]

            else:
                messC(tr('"Database" type repository chosen, but database connection or schemaname not set'))
        else:
    
            # File based local repository
            indx = sd.cbFiletype.currentIndex()
            fpth = sd.fwDirectory.filePath()
            if fpth != "" and indx >= 0:
    
                ftyp = sd.cbFiletype.currentText()
                fext = sd.cbFiletype.itemData(indx)
    
                # create uri, filename/tablename

                udict['gname'] = gname
                udict['pkname'] = pkname
                udict['path'] = fpth
                udict['tname'] = tname
                udict['contype'] = 'ogr'
                if fext == '':  # tab or shape
                    udict['ext'] = '.tab' if ftyp == 'MapInfo TAB' else '.shp'
                else:  # spatialite or geopackage
                    udict['ext'] = '.sqlite' if ftyp == 'SpatiaLite' else '.gpkg'

            else:
                messC('Directory path, file path or filetype not set')

        return udict



    def createUri(self, tname, gname = 'geom', pkname='objekt-id'):
    
        sd = self.dockwidget

        uristr = ''
        contype = ''
    
        # find/check connectype and connection information
        if sd.rbDatabase.isChecked():
    
            # Database based local repository
            if sd.cbDatabase.currentIndex() >= 0 and sd.leSchema.text() != '':
                setting = sd.cbDatabase.itemData(sd.cbDatabase.currentIndex())
                contype = setting[0]
                metadata = QgsProviderRegistry.instance().providerMetadata(contype)
                connection = metadata.findConnection(setting[1])
    
                # create uri, database connection
                logI('uri 0: '+ connection.uri())
                uri = QgsDataSourceUri(connection.uri())
                logI('uri 1: '+ uri.uri())
                uri.setSchema(sd.leSchema.text())
                uri.setTable(tname)
                uri.setGeometryColumn(gname)
                uri.setKeyColumn(pkname)
                uristr = uri.uri()
                logI('uri 2: '+ uri.uri())
            else:
                messC(tr('"Database" type repository chosen, but database connection or schemaname not set'))
        else:
    
            # File based local repository
            indx = sd.cbFiletype.currentIndex()
            fpth = sd.fwDirectory.filePath()
            if fpth != "" and indx >= 0:
    
                contype = 'ogr'
    
                ftyp = sd.cbFiletype.currentText()
                fext = sd.cbFiletype.itemData(indx)
    
                # create uri, filename/tablename
                if fext == '':  # tab or shape
                    uristr = os.path.join(fpth, val['name'] + '.tab' if ftyp == 'MapInfo TAB' else '.shp')
                else:  # spatialite or geopackage
                    uristr = '{}|{}'.format(fpth + '.sqlite' if ftyp == 'SpatiaLite' else '.gpkg', val['name'])
            else:
                messC('Directory path, file path or filetype not set')

        return uristr, contype
 

    def pbDownloadClicked(self):
        """Fetch feature objects from DMP"""

        # Check password, perhaps show logon
        if self.checkToken():

            # set dict vars
            sd = self.dockwidget
            spa = self.parm["Access"]
            spc = self.parm["Commands"]
            spv = self.parm["Values"]

            # Create map groups and log layer if they doesn't exist
            root = QgsProject.instance().layerTreeRoot()
            mprg = createGroup(spv["Global root"], root)
            mpag = createGroup(spv["Administration root"], mprg)
            spath = os.path.join(self.plugin_dir, 'templates')

            ltlog, llog = createRequestLog("DMPManager", "Requestlog", spv["Log layername"], mpag, True, os.path.join(spath, spv["Log layername"] + '.qml'))

            # theme number from combobox
            indx = sd.cbDownload.currentIndex()

            if indx >= 0:

                # find id + name + layername using combobox index
                val = sd.cbDownload.itemData(indx)

                udict = self.createUriDict(val['name'])

                if udict != {}:

                    # Create header information for requests
                    headers = copy.deepcopy(spa['Headers'])
                    headers['Authorization'] = headers['Authorization'].format(sd.leToken.text())

                    extent = mapperExtent(spv["EPSG code"]).asWkt() if sd.chbMapExtent.isChecked() else spv["Max extent"]
                    url = spa['Address'] + spc['objekter'] + spc['objektfilter 1'].format(extent, val['id'])

                    #status, result = handleRequest(url, False, headers, None, llog, '', 'dmptest')
                    status, result = handleRequest(url, False, {"accept": "application/vnd.api+json"}, None, llog, '', 'dmptest')

                    # download OK
                    if status == 200:

                        ml = None
                        ll = []

                        title, ml, ll = createMemLayer(self.attributes, val['id'], 25832)
                        
                        if ml is not None:

                            for tt, le in ll.items():
                              
                                udict['tname'] = le.name() 
                                udict['gname'] = '' 
                                udict['pkname'] = ''
                                le2 = copyLayer2Layer(le, udict, True)
                                if le2: addLayer2Tree(mpag, le2, False, "DMPManager", le2.name(), os.path.join(spath, tt + '.qml'), tt)
                        
                            loadLayer(ml, result)


                            udict['tname'] = ml.name() 
                            udict['gname'] = 'geom' 
                            udict['pkname'] = ''
                            ml2 = copyLayer2Layer(ml, udict, sd.chbOverwrite.isChecked())
                            if ml2: 
                                addLayer2Tree(mprg, ml2, False, "DMPManager", ml2.name(), os.path.join(spath, val['title'] + '.qml'), title)
                            else: 
                                messC('Creation of layer {} ({}) failed. It might already exist'.format(title,ml.name())) 

                    else:

                        messC('Error {} for download of {}'.format(status, 'objekter'))

            else:
                messC('Error, no selection of download layer')

    def rbDatabaseToggled(self, enabled):
        """ tbd """

        sd = self.dockwidget
        sd.gbDatabase.setEnabled(enabled)
        sd.gbDirectory.setEnabled(not enabled)

    def loadCbDatabase(self, item):
        """Load cbDatabase combobox from main settings"""

        sd = self.dockwidget
        st = QSettings()

        sd.cbDatabase.clear()

        dbn = {'MSSQL': 'mssql', 'Oracle': 'oracle', 'PostgreSQL': 'postgres'}
        for k, v in dbn.items():

            dx = '/{}/connections/'.format(k)
            st.beginGroup(dx)
            conn = st.childGroups()
            st.endGroup()

            for c in conn:
                sd.cbDatabase.addItem('{} - {}'.format(k, c), [v, c])

            sd.cbDatabase.setCurrentIndex(sd.cbDatabase.findText(item))

    def loadCbFiletype(self, dft, item):
        """Load cbDatabase combobox from main settings"""

        sd = self.dockwidget
        sd.cbFiletype.clear()

        for key, val in dft.items():
            sd.cbFiletype.addItem(key, val)

        sd.cbFiletype.setCurrentIndex(sd.cbFiletype.findText(item))

    def cbFileTypeCurrentIndexChanged(self, index):
        """TBD"""

        if index >= 0:

            sd = self.dockwidget
            val = sd.cbFiletype.itemData(index)
            sd.fwDirectory.setFilePath('')

            if val != '':  # New path has to be a filename
                sd.fwDirectory.setDialogTitle(tr("Select file"))
                sd.fwDirectory.setStorageMode(QgsFileWidget.SaveFile)
                sd.fwDirectory.setFilter(val)

            else:  # New path has to be a directory name
                sd.fwDirectory.setDialogTitle(tr("Select directory"))
                sd.fwDirectory.setStorageMode(QgsFileWidget.GetDirectory)

    def lookupTemakoder(dtk, temanr):
        for d in dtk:
            if d["id"] == str(temanr):
                return d["attributes"]["title"], d["attributes"]["name"], d["attributes][geometry-type"]
        return None, None, None
