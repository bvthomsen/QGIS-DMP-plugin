# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DMPManager
                                 A QGIS plugin
 Manage data from Danmarmarks Milj√∏portal (DMP)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-12-08
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Bo Victor Thomsen, AestasGIS Danmark
        email                : bvt@aestas.dk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
import webbrowser
import copy
import processing

from PyQt5.QtCore import (QSettings,
                          QTranslator,
                          QCoreApplication,
                          Qt,
                          QUrl,
                          QDateTime)
                          
from PyQt5.QtGui import QIcon, QFont

from PyQt5.QtTest import QTest

from PyQt5.QtWidgets import (QAction,
                             QMenu,
                             QInputDialog,
                             QLineEdit,
                             QMessageBox)

from PyQt5.Qt import (QStandardItemModel,
                      QStandardItem)

from qgis.core import (QgsProject,
                       QgsProviderRegistry,
                       QgsDataSourceUri,
                       QgsVectorLayer,
                       QgsFeatureRequest,
                       QgsAbstractDatabaseProviderConnection,
                       QgsGeometry,
                       QgsFeature,
                       QgsWkbTypes)

from qgis.gui import QgsFileWidget
from .resources import *

from .helper import (tr,
                     trInit,
                     logI,
                     logW,
                     logC,
                     messI,
                     messW,
                     messC,
                     read_config,
                     write_config,
                     handleRequest,
                     mapperExtent,
                     createDateTimeName,
                     loadLayer,
                     updateLayers,
                     createGroup,
                     addLayer2Tree,
                     createMemLayer,
                     createRequestLog,
                     copyLayer2Layer,
                     findLayerVariableValue,
                     evalLayerVariable,
                     zoomToFeature,
                     get_random_string,
                     loadVectorTableFromConnection)
                     
from .named_pipe import NamedPipe
from json import load, dump, dumps, loads

from .dmp_manager_dockwidget import DMPManagerDockWidget


class DMPManager:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DMPManager_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        trInit('DMPManager')

        # Declare instance attributes
        self.actions = []

        self.menu = tr(u'&DMP Manager')
        self.toolbar = self.iface.addToolBar(u'DMPManager')
        self.toolbar.setObjectName(u'DMPManager')

        #print "** INITIALIZING DMPManager"

        self.pluginIsActive = False
        self.dockwidget = None
        self.parm = None
        self.attributes = None
        self.dmpPipe = None
        self.dmpLog = None


    def add_action(self, icon_path, text, callback, enabled_flag=True, add_to_menu=True,
                   add_to_toolbar=True, status_tip=None, whats_this=None, parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/dmp_manager/icon.png'
        self.add_action(
            icon_path,
            text=tr(u'DMP Manager'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""


        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        self.pluginIsActive = False
    
    

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        try:
            if self.dmpPipe:
                self.dmpPipe.stop()
                QTest.qWait(500)
        except:
            pass
            
        for action in self.actions:
            self.iface.removePluginWebMenu(
                tr(u'&DMP Manager'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            if self.dockwidget is None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = DMPManagerDockWidget()

            # Connect signals and slots for dockwidget
            sd = self.dockwidget
            sd.pbReset.clicked.connect(self.pbResetClicked)
            sd.pbSave.clicked.connect(self.pbSaveClicked)
            sd.leToken.textChanged.connect(self.leTokenTextChanged)
            sd.pbReqToken.clicked.connect(self.pbReqTokenClicked)
            #sd.pbLogout.clicked.connect(self.pbLogoutClicked)
            #sd.pbDeprToken.clicked.connect(self.pbDeprTokenClicked)
            sd.pbPrefLayer.clicked.connect(self.pbPrefLayerClicked)
            sd.pbRefresh.clicked.connect(self.pbRefreshClicked)
            sd.pbDownload.clicked.connect(self.pbDownloadClicked)
            sd.twMain.currentChanged.connect(self.twMainCurrentChanged)
            sd.pbClearCompare.clicked.connect(self.pbClearCompareClicked)
            sd.pbUncheckAll.clicked.connect(self.pbUncheckAllClicked)
            sd.pbCheckAll.clicked.connect(self.pbCheckAllClicked)
            sd.pbUploadChecked.clicked.connect(self.pbUploadCheckedClicked)
            sd.pbCompare.clicked.connect(self.pbCompareClicked)
            sd.pbLayerStyle.clicked.connect(self.pbLayerStyleClicked)
            sd.pbCheck.clicked.connect(self.pbCheckClicked)
            sd.pbSinglepart.clicked.connect(self.pbSinglepartClicked)
            #sd.pbUpload.clicked.connect(self.pbUploadClicked)

            sd.tvCompare.setContextMenuPolicy(Qt.CustomContextMenu)
            sd.tvCompare.customContextMenuRequested.connect(self.tvCompareOpenMenu)
            sd.cbDatabase.currentIndexChanged.connect (self.cbDatabaseCurrentIndexChanged)
            sd.cbEnvironment.currentIndexChanged.connect (self.cbEnvironmentCurrentIndexChanged)
            sd.pbDatabase.clicked.connect(self.pbDatabaseClicked)
            sd.pbSchema.clicked.connect(self.pbSchemaClicked)

            # connect to provide cleanup on closing of dockwidget
            sd.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            self.iface.addDockWidget(Qt.RightDockWidgetArea, sd)
            sd.show()

            # Set initial values
            self.pbResetClicked()
            self.twMainCurrentChanged(1)
            spd = self.parm["Data"]
            spa = self.parm["Access"][self.parm["Access_active"]]

            if self.dmpPipe == None: 
                progName = os.path.join(self.plugin_dir,'login_app','DMPLogin.exe')

                if spa["pipeName"]:
                    pipeName = spa["pipeName"]
                else:
                    pipeName = get_random_string(24)
                
                self.dmpPipe = NamedPipe(progName,
                                         spa["clientId"],
                                         spa["host"],
                                         spa["port"],
                                         spa["redirectUri"],
                                         spa["postLogoutRedirectUri"],
                                         spa["authority"],
                                         spa["scope"],
                                         spa["api"],
                                         pipeName,
                                         spa["ShowConsole"])


    def tvCompareOpenMenu(self, position):
    
        sd = self.dockwidget
        indexes = sd.tvCompare.selectedIndexes()
        if len(indexes) > 0:
        
            index = indexes[0]
            crawler = index.model().itemFromIndex(index)
            level = 0
            while index.parent().isValid():
                level += 1
                index = index.parent()

            if level == 1:
                menu = QMenu()

                rollbackAction = QAction(tr('Cancel modification: "{}"').format(crawler.text()), sd.tvCompare)
                rollbackAction.triggered.connect(lambda:self.rightClickAction('rollback', crawler))
                menu.addAction(rollbackAction)

                commitAction = QAction(tr('Upload modification to DMP: "{}"').format(crawler.text()), sd.tvCompare)
                commitAction.triggered.connect(lambda:self.rightClickAction('commit', crawler))
                menu.addAction(commitAction)

                showAction = QAction(tr('Show DMP error: "{}"').format(crawler.text()), sd.tvCompare)
                showAction.triggered.connect(lambda:self.rightClickAction('show', crawler))
                menu.addAction(showAction)

                zoomAction = QAction(tr('Zoom/pan to feature: "{}"').format(crawler.text()), sd.tvCompare)
                zoomAction.triggered.connect(lambda:self.rightClickAction('zoom', crawler))
                menu.addAction(zoomAction)
        
                menu.exec_(sd.tvCompare.viewport().mapToGlobal(position))


#        capabilities = conn.capabilities() 
#        self.assertTrue(bool(capabilities & QgsAbstractDatabaseProviderConnection.Tables))
#        self.assertFalse(bool(capabilities & QgsAbstractDatabaseProviderConnection.Schemas))
#        self.assertTrue(bool(capabilities & QgsAbstractDatabaseProviderConnection.CreateVectorTable))
#        self.assertTrue(bool(capabilities & QgsAbstractDatabaseProviderConnection.DropVectorTable))
#        self.assertTrue(bool(capabilities & QgsAbstractDatabaseProviderConnection.RenameVectorTable))
#        self.assertFalse(bool(capabilities & QgsAbstractDatabaseProviderConnection.RenameRasterTable))



    def setDmpLog(self):
    
        sd = self.dockwidget
        spn = self.parm["Names"]
       
        root = QgsProject.instance().layerTreeRoot()
        mprg = createGroup(spn["Global root"], root)
        mpag = createGroup(spn["Administration root"], mprg)
        spath = os.path.join(self.plugin_dir, 'templates')
        ltlog, llog = createRequestLog("DMPManager", "LOG - Requestlog", spn["Log layername"], mpag, True, os.path.join(spath, spn["Log layername"] + '.qml'))

        return llog
        
    
    def rightClickAction (self, operation, crawler, log=False):

        sd = self.dockwidget
        spd = self.parm["Data"]
        spn = self.parm["Names"]
        spr = self.parm["rollback"]
        spc = self.parm["Commands"]
        spa = self.parm["Access"][self.parm["Access_active"]]
        
        llog = self.setDmpLog()

        ltype  = str(crawler.parent().data(Qt.UserRole+1))
        fid = str(crawler.data(Qt.UserRole+2))
        pkid = crawler.text()
        lid = str(crawler.parent().data(Qt.UserRole+2))
        tblRef = str(crawler.parent().data(Qt.UserRole+3))
        tblCur = str(crawler.parent().data(Qt.UserRole+4))
        pkName = str(crawler.parent().data(Qt.UserRole+5))
        pkQuote = str(crawler.parent().data(Qt.UserRole+6))
        tCode = str(crawler.parent().data(Qt.UserRole+7))

        setting = sd.cbDatabase.itemData(sd.cbDatabase.currentIndex())
        metadata = QgsProviderRegistry.instance().providerMetadata(setting[0])
        connection = metadata.findConnection(setting[1])
 
        if operation == 'zoom':
        
            zoomToFeature(str(crawler.parent().data(Qt.UserRole+2)),int(str(crawler.data(Qt.UserRole+2)))) 

        elif operation == 'show':
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText(str(crawler.data(Qt.UserRole+1)))
            msgBox.setWindowTitle(tr('Message for {}').format(pkid))
            msgBox.setStandardButtons(QMessageBox.Close)
            msgBox.exec()
            
        elif operation == 'rollback':

            sql = spr[ltype]
            connection.executeSql(sql.format(cur=tblCur, ref=tblRef, pk=pkName, qt=pkQuote, val=pkid)) 
            crawler.setEnabled(False)

        elif operation == 'commit':

            tblc= tblCur.replace('"','').split('.')
            logI ('Tjek af tabel navn: {} & {} & {}'.format(tblCur,tblc[len(tblc)-1],spa["Name"]))
            if spa["Name"][:4].lower() == tblc[len(tblc)-1][:4].lower():
     
                if ltype == 'Inserted':
                    self.insDMP(pkid, crawler, connection, tblCur, tblRef, pkName, pkQuote, tCode, log)
    
                elif ltype == 'Deleted':
                    self.delDMP(pkid, crawler, connection, tblCur, tblRef, pkName, pkQuote, log)
                    
                elif ltype == 'Modified':
                    self.updDMP(pkid, crawler, connection, tblCur, tblRef, pkName, pkQuote, tCode, log)

            else:
                if log:
                    LogC(tr('You can''t commit changes made in previous environment into environment: {}').format(spa["Name"]), tr('Changed environment with outstanding commits'))            
                else:
                    messC(tr('You can''t commit changes made in previous environment into environment: {}').format(spa["Name"]), tr('Changed environment with outstanding commits'))            
                
        if not log: self.iface.mapCanvas().refreshAllLayers() 

    def delDMP(self, pkid, crawler, connection, tblCur, tblRef, pkName, pkQuote, log=False):

        sd = self.dockwidget
        spc = self.parm["Commands"]
        spa = self.parm["Access"][self.parm["Access_active"]]  
        spr = self.parm["rollback"]


        if self.checkToken():
            res = connection.executeSql('select "{ver}" from {ref} where "{pk}"={qt}{val}{qt}'.format(ver='version-id', ref=tblRef, pk=pkName, qt=pkQuote, val=pkid))  
            url = '{}{}/{}'.format(spa['Address'], spc['objekter'], res[0][0])
   
            headers = copy.deepcopy(spa['Headers'])
            headers['Authorization'] = headers['Authorization'].format(sd.leToken.text())
    
            status, result = handleRequest(url, 'delete', headers, None, self.dmpLog, 'dmptest')
    
            if status == 200 or status == 204:
                crawler.setEnabled(False)
                sql = spr["Inserted"]
                connection.executeSql(sql.format(cur=tblRef, pk=pkName, qt=pkQuote, val=pkid)) 
                if not log: self.iface.mapCanvas().refreshAllLayers() 

                if log: 
                    logI(tr('Status: {} - Delete of {}:{} done\n{}').format(status, pkName, pkid, result))
                else:
                    messI(tr('Status: {} - Delete of {}:{} done\n{}').format(status, pkName, pkid, result))
            else:
                if log: 
                    logC(tr('Error {} - Delete of {}:{}\n{}').format(status, pkName, pkid, result))
                else:
                    messC(tr('Error {} - Delete of {}:{}\n{}').format(status, pkName, pkid, result))
                crawler.setData(result, Qt.UserRole+1)


    def insDMP(self, pkid, crawler, connection, tblCur, tblRef, pkName, pkQuote, tCode, log=False):

        sd = self.dockwidget
        spc = self.parm["Commands"]
        spa = self.parm["Access"][self.parm["Access_active"]]  
        spr = self.parm["rollback"]
        spt = self.parm["Templates"]
        
        saa = self.attributes["attributter"]
        sat = self.attributes["temaattributter"]
        satk = self.attributes["temakoder"]

        if self.checkToken():
            url = '{}{}'.format(spa['Address'], spc['objekter'])
   
            headers = copy.deepcopy(spa['Headers'])
            headers['Authorization'] = headers['Authorization'].format(sd.leToken.text())

            package = copy.deepcopy(spt['Objekter'])
            del package["data"]["id"]
            package["data"]["relationships"]["temakode"]["data"]["id"] = tCode
            package["data"]["relationships"]["temakode"]["data"]["type"] = 'temakoder'
            pa = package["data"]["attributes"] 
            
            # Paste theme specific entries into package
            for ta in sat:
                if ta["relationships"]["temakode"]["data"]["id"] == tCode: 
                    pa["temaattributter"][ta["attributes"]["name"]] = None
             
            options = QgsAbstractDatabaseProviderConnection.SqlVectorLayerOptions()
            options.sql = 'SELECT * FROM {cur} WHERE \"{pk}\" = {qt}{val}{qt}'.format(cur=tblCur, pk=pkName, qt=pkQuote, val=pkid)
            options.primaryKeyColumns = [pkName]
            options.geometryColumn = 'geom'
            vl = connection.createSqlVectorLayer(options)

            del pa["id"]

            for f in vl.getFeatures():
                fi = f.fields()
                
                for ta in pa["temaattributter"].keys():
                    pa["temaattributter"][ta] = self.cnvDBField (ta, f[ta])
                            
                            
                pa["objekt-id"] = None
                pa["version-id"] = None
                pa["systid-fra"] = None
                pa["systid-til"] = None
                pa["oprettet"] = None
                pa["bruger-id"] =  None
                pa["link"] = None
                pa["oprindkode-id"] = int(f["oprindkode-id"])
                pa["statuskode-id"] = int(f["statuskode-id"])
                pa["off-kode-id"] = int(f["off-kode-id"])
                pa["cvr-kode-id"] = None
                pa["shape"] = loads(f.geometry().asJson())

                logI('package = \n' + dumps(package))
                status, result = handleRequest(url, 'post', headers, package, self.dmpLog, 'dmptest')
                   
                if status >= 200 and status <= 299:

                    vcur = tblCur.replace('"','').split('.')
                    if len(vcur) == 1:
                        vcur.append(vcur[0])
                        vcur[0] = ''
                    curl = loadVectorTableFromConnection (connection, vcur[0], vcur[1], 'current')


                    vref = tblRef.replace('"','').split('.')
                    if len(vref) == 1:
                        vref.append(vref[0])
                        vref[0] = ''
                    refl = loadVectorTableFromConnection (connection, vref[0], vref[1], 'reference')

                    updateLayers (curl,refl, result, pkName, pkQuote, pkid)

                    crawler.setEnabled(False)

                    if not log: self.iface.mapCanvas().refreshAllLayers() 

                    if log:
                        logI(tr('Status: {} - Insert of {}:{} done\n{}').format(status, pkName, pkid, result))
                    else:
                        messI(tr('Status: {} - Insert of {}:{} done\n{}').format(status, pkName, pkid, result))
                else:
                    if log:
                        logC(tr('Error: {} - Insert of {}:{}\n{}').format(status, pkName, pkid, result))
                    else:
                        messC(tr('Error: {} - Insert of {}:{}\n{}').format(status, pkName, pkid, result))
                    crawler.setData(result, Qt.UserRole+1)


                    
    def cnvDBField(self, ta,fv):
    
        if ta.find('-id') != -1:
            try:
                return int(fv)
            except:
                pass 
        txt = fv.toString(Qt.ISODate) if isinstance(fv, QDateTime) else str(fv) 
        return None if txt == 'NULL' else txt


    def updDMP(self, pkid, crawler, connection, tblCur, tblRef, pkName, pkQuote, tCode, log=False):

        sd = self.dockwidget
        spc = self.parm["Commands"]
        spa = self.parm["Access"][self.parm["Access_active"]]  
        spr = self.parm["rollback"]
        spt = self.parm["Templates"]
        
        saa = self.attributes["attributter"]
        sat = self.attributes["temaattributter"]
        satk = self.attributes["temakoder"]

        if self.checkToken():
            url = '{}{}'.format(spa['Address'], spc['objekter'])
   
            headers = copy.deepcopy(spa['Headers'])
            headers['Authorization'] = headers['Authorization'].format(sd.leToken.text())

            package = copy.deepcopy(spt['Objekter'])
            package["data"]["relationships"]["temakode"]["data"]["id"] = tCode
            package["data"]["relationships"]["temakode"]["data"]["type"] = 'temakoder'
            pa = package["data"]["attributes"] 
            
            # Paste theme specific entries into package
            for ta in sat:
                if ta["relationships"]["temakode"]["data"]["id"] == tCode: 
                    pa["temaattributter"][ta["attributes"]["name"]] = None
            
            options = QgsAbstractDatabaseProviderConnection.SqlVectorLayerOptions()
            options.sql = 'SELECT * FROM {cur} WHERE \"{pk}\" = {qt}{val}{qt}'.format(cur=tblCur, pk=pkName, qt=pkQuote, val=pkid)
            options.primaryKeyColumns = [pkName]
            options.geometryColumn = 'geom'
            vl = connection.createSqlVectorLayer(options)

            del pa["id"]

            for f in vl.getFeatures():

                for ta in pa["temaattributter"].keys():
                    pa["temaattributter"][ta] = self.cnvDBField (ta, f[ta])

                for i in ["objekt-id", "version-id", "systid-fra", "systid-til", "oprettet", "bruger-id", "oprindkode-id", "link", "oprindkode-id", "statuskode-id", "off-kode-id", "cvr-kode-id", "statuskode-id", "off-kode-id"]:
                    pa[i] = self.cnvDBField (i, f[i])
                pa["shape"] = loads(f.geometry().asJson())
                package["data"]["id"] = pa["version-id"]


                logI('package = \n' + dumps(package))
                status, result = handleRequest(url+"/"+pa["version-id"], 'patch', headers, package, self.dmpLog, 'dmptest')
                   
                if status >= 200 and status <= 299:

                    vcur = tblCur.replace('"','').split('.')
                    if len(vcur) == 1:
                        vcur.append(vcur[0])
                        vcur[0] = ''
                    curl = loadVectorTableFromConnection (connection, vcur[0], vcur[1], 'current')

                    vref = tblRef.replace('"','').split('.')
                    if len(vref) == 1:
                        vref.append(vref[0])
                        vref[0] = ''
                    refl = loadVectorTableFromConnection (connection, vref[0], vref[1], 'reference')

                    status, result = handleRequest(url+spc["objektfilter 2"].format(tCode,pa["objekt-id"]), 'get', headers, None, self.dmpLog, 'dmptest')

                    updateLayers (curl,refl, result, pkName, pkQuote, pkid)

                    crawler.setEnabled(False)

                    if not log: self.iface.mapCanvas().refreshAllLayers() 

                    if log:
                        logI(tr('Status: {} - Update of {}:{} done\n{}').format(status, pkName, pkid, result))
                    else:
                        messI(tr('Status: {} - Update of {}:{} done\n{}').format(status, pkName, pkid, result))
                else:
                    if log:
                        logC(tr('Error: {} - Update of {}:{}\n{}').format(status, pkName, pkid, result))
                    else:
                        messC(tr('Error: {} - Update of {}:{}\n{}').format(status, pkName, pkid, result))
                    crawler.setData(result, Qt.UserRole+1)

    def loadCbCVRNo (self, cb, keyid):

        saa = self.attributes["attributter"]
        for d in saa:
            if d["id"] == 'cvr-kode-id': 
                cb.clear()
                list = d["attributes"]["domain"]
                for key, value in list.items(): cb.addItem(value, key)                     
                index = cb.findData(keyid)
                if index != -1: cb.setCurrentIndex(index);

    def loadCbEnvironment (self, cb, keyid):

        cb.blockSignals(True)
        cb.clear()
        spap = self.parm["Access"]
        for key, value in spap.items(): cb.addItem(value["Name"], key)                     
        index = cb.findData(keyid)
        if index != -1: cb.setCurrentIndex(index);
        cb.blockSignals(False)
        
    def genDictWhere(self, name, expr=r'cur."{0}" {1} ref."{0}"', opr = r'!=', conc='or', gname='geom', prefix='', postfix=''):
        """Generate where part from dictCompare chosen """

        saa = self.attributes["attributter"]
        sat = self.attributes["temaattributter"]
        satk = self.attributes["temakoder"]

        temanr = "-9999"
        
        for tk in satk:
            if tk["attributes"]["name"] == name: 
                temanr = tk["id"]
                break        

        whr = ''

        if temanr != "-9999":

            fl = []
    
            for d in saa:
                if d["id"] != 'temaattributter': 
                    fl.append(d["attributes"]["name"])
   
            for d in sat:
                if d["relationships"]["temakode"]["data"]["id"] == temanr: 
                    fl.append(d["attributes"]["name"])
            
            whr = expr.format(gname,opr) 
            for f in fl:
                whr += ' ' + conc + ' ' + expr.format(f,opr)

        return prefix + whr + postfix

    def pbCheckClicked(self):

        sd = self.dockwidget 
        # Find layer to be compared
        indx = sd.cbLayerCheck.currentIndex()        

        if indx >=0:

            # Generate string for Current layer...         
            data = sd.cbLayerCheck.itemData(indx)
            mlayer = data[0]
            layer = mlayer.layer()       
            layerSource = "{pt}:{sc}:cur:UTF-8".format(pt=layer.providerType(),sc=layer.source())
            logI(layerSource)
            processing.execAlgorithmDialog('qgis:checkvalidity') #,{ 'ERROR_OUTPUT' : 'TEMPORARY_OUTPUT', 'IGNORE_RING_SELF_INTERSECTION' : False, 'INPUT_LAYER' : layerSource , 'INVALID_OUTPUT' : 'TEMPORARY_OUTPUT', 'METHOD' : 2, 'VALID_OUTPUT' : 'TEMPORARY_OUTPUT'})

    def pbSinglepartClicked(self):

        sd = self.dockwidget 
        # Find layer to be compared
        indx = sd.cbLayerCheck.currentIndex()        

        if indx >=0:

            # Generate string for Current layer...         
            data = sd.cbLayerCheck.itemData(indx)
            mlayer = data[0]
            layer = mlayer.layer()       

            if layer.isEditable():
            
                messW(tr('The layer chosen is in edit mode; please change this before using "Multipart to singlepart" function'))            
            
            else:
            
                layer.startEditing()

                fields = layer.fields()
                pkfields = layer.primaryKeyAttributes()

                cnt_mod = 0
                cnt_app = 0

                features = layer.getSelectedFeatures()
                for feature in features:

                    new_features = list()
                    fid = feature.id()
                    geoms = feature.geometry()
                    attribs = feature.attributes()

                    for i in pkfields:
                        attribs[i] = None

                    for p in geoms.parts():
                        new_feature = QgsFeature()
                        new_feature.setFields(fields)
                        geom = QgsGeometry()
                        geom.fromWkb(p.asWkb())
                        new_feature.setGeometry(geom)
                        new_feature.setAttributes(attribs)
                        new_features.append(new_feature)

                    l = len(new_features)
                    if l > 1:
                        layer.changeGeometry(fid, new_features[0].geometry())
                        layer.addFeatures(new_features[1:])
                        cnt_mod += 1
                        cnt_app += l-1
                
                layer.commitChanges()
                
                if cnt_mod > 0:
                    messI(tr('No of features modified: {}; No features added: {}').format(cnt_mod, cnt_app))
                else:
                    messW(tr('No selection made in chosen layer or the selection didn''t contain any mulipart polygons'))            
            

    def pbLayerStyleClicked(self):

        sd = self.dockwidget 
        # Find layer to be compared
        indx = sd.cbLayerStyle.currentIndex()        

        if indx >=0:

            # Generate string for Current layer...         
            data = sd.cbLayerStyle.itemData(indx)
            mlayer = data[0]
            layer = mlayer.layer()       
            style_path = os.path.join(self.plugin_dir,'templates','{}.qml'.format(mlayer.name()))
            layer.saveNamedStyle(style_path)
    
    def pbCompareClicked(self):
        """Compare chosen datalayer with its reference layer"""

        sd = self.dockwidget
        spn = self.parm["Names"]        
        sps = self.parm["Selections"]
        spd = self.parm["Data"]
        spa = self.parm["Access"][self.parm["Access_active"]] 


        # Clear current model
        self.pbClearCompareClicked()

        # Find layer to be compared
        indx = sd.cbLayerCheck.currentIndex()        

        if indx >=0:

            # Generate string for Current layer...         
            lcData = sd.cbLayerCheck.itemData(indx)
            mlayer = lcData[0]
            layer = mlayer.layer()       
            tname = lcData[1]
            tcode = lcData[2]

            dbData = sd.cbDatabase.itemData(sd.cbDatabase.currentIndex())
            logI (str(dbData))
            conns = QgsProviderRegistry.instance().providerMetadata(dbData[0]).connections(False)
            dbCon = conns[dbData[1]]

            if sd.cbSchema.currentIndex() >=0:
                tblRef = '"{}"."{}_{}_{}"'.format(sd.cbSchema.currentText(), spd['RefPrefix'], spa["Name"][:4].lower(), lcData[1])
                tblCur = '"{}"."{}_{}"'.format(sd.cbSchema.currentText(), spa["Name"][:4].lower(), lcData[1])
            else:
                tblRef = '"{}_{}_{}"'.format(spd['RefPrefix'], spa["Name"][:4].lower(), lcData[1])
                tblCur = '"{}_{}"'.format(spa["Name"][:4].lower(), lcData[1])

            svlo = QgsAbstractDatabaseProviderConnection.SqlVectorLayerOptions()
            svlo.primaryKeyColumns = [spd["PKName"]]
            svlo.geometryColumn = spd["GName"]

            # Generate Inserted layer ...
            svlo.sql = sps['Inserted'].format(ref=tblRef, cur=tblCur, pk=spd["PKName"])
            logI(svlo.sql)
            svlo.layerName= spn["Inserted"]
            lins = dbCon.createSqlVectorLayer(svlo)

            # Generate Deleted virtual layer ...
            svlo.sql = sps['Deleted'].format(ref=tblRef, cur=tblCur, pk=spd["PKName"])
            logI(svlo.sql)
            svlo.layerName= spn["Deleted"]
            ldel = dbCon.createSqlVectorLayer(svlo)

            # Generate Modified virtual layer ...
            svlo.sql = sps['Modified_cur'].format(ref=tblRef, cur=tblCur, pk=spd["PKName"])
            logI(svlo.sql)
            svlo.layerName= spn["Modified"]
            lmod = dbCon.createSqlVectorLayer(svlo)

            # Show virtual layers i map window
            if ldel.isValid() or lmod.isValid() or lins.isValid():

                mprg = createGroup(spn["Global root"], QgsProject.instance().layerTreeRoot())
                mpeg = createGroup(spn["Edited root"], mprg, True)

                rins = None
                rdel = None
                rmod = None
                spath = os.path.join(self.plugin_dir, 'templates')

                if lins.isValid(): 

                    ltins = addLayer2Tree(mpeg, lins, False, "DMPManager","INSERTED", os.path.join(spath, spn["Inserted"] + '.qml'), spn["Inserted"])

                    rins = QStandardItem(spn["Inserted"]) 
                    rins.setData('Inserted', Qt.UserRole+1)
                    rins.setData(ltins.layerId(), Qt.UserRole+2)
                    rins.setData(tblRef, Qt.UserRole+3)
                    rins.setData(tblCur, Qt.UserRole+4)
                    rins.setData(spd["PKName"], Qt.UserRole+5)
                    rins.setData(spd["PKQuote"], Qt.UserRole+6)
                    rins.setData(tcode, Qt.UserRole+7)
                    rins.setEditable(False)
 
                    for f in lins.getFeatures():
                    
                        iins = QStandardItem(str(f[spd["PKName"]])) 
                        iins.setCheckable(True)
                        iins.setCheckState(Qt.Unchecked)
                        iins.setData(tr('No message yet'), Qt.UserRole+1)
                        iins.setData(str(f.id()), Qt.UserRole+2)
                        iins.setEditable(False)
                        rins.appendRow(iins)

                if ldel.isValid(): 

                    ltdel = addLayer2Tree(mpeg, ldel, False, "DMPManager","DELETED", os.path.join(spath, spn["Deleted"] + '.qml'),  spn["Deleted"])

                    rdel = QStandardItem(spn["Deleted"]) 
                    rdel.setData('Deleted', Qt.UserRole+1)
                    rdel.setData(ltdel.layerId(), Qt.UserRole+2)
                    rdel.setData(tblRef, Qt.UserRole+3)
                    rdel.setData(tblCur, Qt.UserRole+4)
                    rdel.setData(spd["PKName"], Qt.UserRole+5)
                    rdel.setData(spd["PKQuote"], Qt.UserRole+6)
                    rdel.setData(tcode, Qt.UserRole+7)
                    rdel.setEditable(False)
 
                    for f in ldel.getFeatures():
                        idel = QStandardItem(str(f[spd["PKName"]])) 
                        idel.setCheckable(True)
                        idel.setCheckState(Qt.Unchecked)
                        idel.setData(tr('No message yet'), Qt.UserRole+1)
                        idel.setData(str(f.id()), Qt.UserRole+2)
                        idel.setEditable(False)
                        rdel.appendRow(idel)

                if lmod.isValid(): 

                    ltmod = addLayer2Tree(mpeg, lmod, False, "DMPManager","MODIFIED", os.path.join(spath, spn["Modified"] + '.qml'), spn["Modified"])

                    rmod = QStandardItem(spn["Modified"]) 
                    rmod.setData('Modified', Qt.UserRole+1)
                    rmod.setData(ltmod.layerId(), Qt.UserRole+2)
                    rmod.setData(tblRef, Qt.UserRole+3)
                    rmod.setData(tblCur, Qt.UserRole+4)
                    rmod.setData(spd["PKName"], Qt.UserRole+5)
                    rmod.setData(spd["PKQuote"], Qt.UserRole+6)
                    rmod.setData(tcode, Qt.UserRole+7)
                    rmod.setEditable(False)

                    for f in lmod.getFeatures():
                        imod = QStandardItem(str(f[spd["PKName"]])) 
                        imod.setCheckable(True)
                        imod.setCheckState(Qt.Unchecked)
                        imod.setData(tr('No message yet'), Qt.UserRole+1)
                        imod.setData(str(f.id()), Qt.UserRole+2)
                        imod.setEditable(False)
                        rmod.appendRow(imod)
                     
                # Add general model to treeview            
                tmc = QStandardItemModel()
                tmcr = tmc.invisibleRootItem()

                if rins: tmcr.appendRow(rins)
                if rdel: tmcr.appendRow(rdel)
                if rmod: tmcr.appendRow(rmod)
                sd.tvCompare.setModel(tmc)
                sd.pbUncheckAll.setEnabled(True)
                sd.pbCheckAll.setEnabled(True)
                sd.pbUploadChecked.setEnabled(True)
            else:
                messI(tr('No inserts, deletes og modifications in layer: {}').format(layer.name()))
                
    def pbUncheckAllClicked(self):
        """TBD"""
        sd = self.dockwidget
        tmc = sd.tvCompare.model()
        if tmc:
            root = tmc.invisibleRootItem()
            if root.hasChildren():
                for i in range(root.rowCount()):
                    childroot = root.child(i)
                    if childroot.hasChildren():
                        for j in range(childroot.rowCount()):
                            item = childroot.child(j)
                            item.setCheckState(Qt.Unchecked)

    def pbCheckAllClicked(self):
        """TBD"""
        sd = self.dockwidget
        tmc = sd.tvCompare.model()
        if tmc:
            root = tmc.invisibleRootItem()
            if root.hasChildren():
                for i in range(root.rowCount()):
                    childroot = root.child(i)
                    if childroot.hasChildren():
                        for j in range(childroot.rowCount()):
                            item = childroot.child(j)
                            item.setCheckState(Qt.Checked)
                

    def pbUploadCheckedClicked(self):
        """TBD"""
        
        sd = self.dockwidget
        tmc = sd.tvCompare.model()
        if tmc:
            msgbox = QMessageBox(QMessageBox.Question, tr("Upload all checked changes"), tr("Are you sure you want to proceed?"))
            msgbox.addButton(QMessageBox.Yes)
            msgbox.addButton(QMessageBox.No)
            msgbox.setDefaultButton(QMessageBox.No)
            if msgbox.exec() == QMessageBox.Yes:
                root = tmc.invisibleRootItem()
                if root.hasChildren():
                    numbers = []
                    texts = []
                    for i in range(root.rowCount()):
                        childroot = root.child(i)
                        number = 0
                        text = childroot.text()
                        if childroot.hasChildren():
                            for j in range(childroot.rowCount()):
                                item = childroot.child(j)
                                if item.checkState() == Qt.Checked and item.isEnabled(): 
                                    self.rightClickAction('commit', item, True)
                                    number += 1
                        numbers.append(number)
                        texts.append(text)

                    message = ''
                    for i in range(len(numbers)): message += ' ' + texts[i] + ': ' + str(numbers[i]) + ','
                    messI(tr('Upload finished, result is:{} uploads. See log for details').format(message[:-1]))
                        
        self.iface.mapCanvas().refreshAllLayers()                    

    def pbClearCompareClicked(self):
        """Clear compare reseults"""
        sd = self.dockwidget
        sd.tvCompare.setModel(None)
        sd.pbUncheckAll.setEnabled(False)
        sd.pbCheckAll.setEnabled(False)
        sd.pbUploadChecked.setEnabled(False)


        # Removed layers inserted, modified and deleted layers from project.
        for e in ['INSERTED','MODIFIED','DELETED']:
            pl, l = findLayerVariableValue("DMPManager", e)
            if pl:
                root = pl.parent()
                root.removeLayer(l)
                if len(root.children()) == 0: 
                    parent = root.parent()
                    if parent: parent.removeChildNode(root)

    def twMainCurrentChanged(self, indx):

        sd = self.dockwidget

        if indx != 2: 
           if sd.cbDatabase.currentIndex() < 0 : messC(tr('Database not set, go to tab "Administration" and select a database to store downloaded DMP data'))
    
        if indx == 1: # "Checks" tab
            self.loadcbLayerCheck()

        if indx == 2: # "Administration" tab
            self.loadcbLayerStyle()

    def pbResetClicked(self):
        """Reread configuration json file and set the self.parm dict"""

        self.parm = read_config(os.path.join(self.plugin_dir, 'configuration.json'))
        self.attributes = read_config(os.path.join(self.plugin_dir, 'attributes.json'))

        sd = self.dockwidget
        spv = self.parm["Values"]
        spd = self.parm["Data"]
        spa = self.parm["Access"][self.parm["Access_active"]]

        #sd.leCVRNo.setText(str(spv["CVR number"]))
        sd.lePrefLayer.setText(spv["Preferred layer"])
        sd.chbMapExtent.setChecked(spv["Use extent"])
        sd.leToken.setText(spv["Token value"])
        sd.dtTimeout.setDateTime(QDateTime().fromString(spv["Token time"], Qt.ISODate))
        sd.lePkName.setText(spd["PKName"])
        sd.lePkQuote.setText(spd["PKQuote"])
        sd.lMiljoe.setText(spa["Name"])
        sd.lMiljoe.setStyleSheet('font: bold 24px') #; color: red')        

        self.loadCbDownload()
        self.loadCbDatabase(spd["Database_types"],spd["Database"],spd["Schema"])
        self.loadCbCVRNo (sd.cbCVRNo, str(spv["CVR number"]))
        self.loadCbEnvironment (sd.cbEnvironment, self.parm["Access_active"])
        
    def pbSaveClicked(self):
        """Save values from several subwidgets into the self.parm dictionary and save it
        permanently into json file"""

        sd = self.dockwidget
        spv = self.parm["Values"]
        spd = self.parm["Data"]

        spv["CVR number"] = int(sd.cbCVRNo.itemData(sd.cbCVRNo.currentIndex()))
        spv["Preferred layer"] = sd.lePrefLayer.text()
        spv["Use extent"] = sd.chbMapExtent.isChecked()
        spv["Token value"] = sd.leToken.text()
        spv["Token time"] = sd.dtTimeout.dateTime().toString(Qt.ISODate)

        spd["Database"] = sd.cbDatabase.currentText()
        spd["Schema"] = sd.cbSchema.currentText()
        spd["PKName"] = sd.lePkName.text()
        spd["PKQuote"] = sd.lePkQuote.text()

        write_config(os.path.join(self.plugin_dir, 'configuration.json'), self.parm)
        write_config(os.path.join(self.plugin_dir, 'attributes.json'), self.attributes)

    def leTokenTextChanged(self, txt):
        """Set timeout parameter for token (current time + 1 hour)"""
        pass
        #sd = self.dockwidget
        #sd.dtTimeout.setDateTime(QDateTime.currentDateTime().addSecs(3500))  # "N√¶sten" 1 time

    def pbReqTokenClicked(self):
        """HTTP request to generate access ticket and token for DMP"""

        sd = self.dockwidget
        res = self.dmpPipe.login()
        if res == '':
            sd.leToken.setText(self.dmpPipe.accessToken)
            sd.dtTimeout.setDateTime(self.dmpPipe.expirationTime)
        else:
            messW(tr('Login error: {}').format(res))

#    def pbLogoutClicked(self):
#        """HTTP request to generate access ticket and token for DMP"""
#
#        sd = self.dockwidget
#        res = self.dmpPipe.logout()
#        if res == '':
#            sd.leToken.setText('')
#            sd.dtTimeout.setDateTime(QDateTime.setCurrentDateTime())
#        else:
#            messW(tr('Logout error: {}').format(res))
            

    def pbPrefLayerClicked(self):
        """Change preferred layerid to current value from cbDownload combobox item value"""

        sd = self.dockwidget
        spv = self.parm["Values"]

        ci = sd.cbDownload.currentIndex()
        if ci >= 0:
            spv["Preferred layer"] = sd.cbDownload.currentText()
            sd.lePrefLayer.setText(spv["Preferred layer"])

    def pbRefreshClicked(self):
        """Fetch all layer names and other information from DMP"""

        if self.checkToken():

            llog = self.setDmpLog()

            sa = self.attributes
            sd = self.dockwidget
            spa = self.parm["Access"][self.parm["Access_active"]]
            spc = self.parm["Commands"]
            spv = self.parm["Values"]

            # Create header information for requests
            headers = copy.deepcopy(spa['Headers'])
            headers['Authorization'] = headers['Authorization'].format(sd.leToken.text())
            url = spa['Address'] + spc['temakoder']
            # logI(url)
            #status, result = handleRequest(url, False, headers, None, None, '', 'dmptest')
            #status, result = handleRequest(url, 'get', {"accept": "application/vnd.api+json"}, None, self.dmpLog, 'dmptest')
            status, result = handleRequest(url, 'get', headers, None, self.dmpLog, 'dmptest')
            if status == 200:
                sa['temakoder'] = result['data']
                self.loadCbDownload()
                messI(tr('Download of {} done').format('temakoder'))
            else:
                messC(tr('Error {} for download of {}').format(status, 'temakoder'))

            url = spa['Address'] + spc['attributter']
            # logI(url)
            #status, result = handleRequest(url, False, headers, None, None, '', 'dmptest')
            status, result = handleRequest(url, 'get', headers, None, self.dmpLog, 'dmptest')
            if status == 200:
                sa['attributter'] = result['data']
                self.loadCbCVRNo (sd.cbCVRNo, str(spv["CVR number"]))
                messI(tr('Download of {} done').format('attributter'))
            else:
                messC(tr('Error {} for download of {}').format(status, 'attributter'))

            url = spa['Address'] + spc['temaattributter'] + spc['temaattributfilter 1']
            # logI(url)
            #status, result = handleRequest(url, False, headers, None, None, '', 'dmptest')
            #status, result = handleRequest(url, 'get', {"accept": "application/vnd.api+json"}, None, self.dmpLog, 'dmptest')
            status, result = handleRequest(url, 'get', headers, None, self.dmpLog, 'dmptest')
            if status == 200:
                sa['temaattributter'] = result['data']
                messI(tr('Download of {} done').format('temaattributter'))
            else:
                messC(tr('Error {} for download of {}').format(status, 'temaattributter'))

    def checkToken(self):
        """Check if token still is valid (not to old)"""

        sd = self.dockwidget

        res = self.dmpPipe.refresh()

        if sd.dtTimeout.dateTime() != self.dmpPipe.expirationTime: messI(tr('Access token and expiration time updated')) 

        sd.leToken.setText(self.dmpPipe.accessToken)
        sd.dtTimeout.setDateTime(self.dmpPipe.expirationTime)

        return True


    def loadcbLayerCheck(self):
    
        sd = self.dockwidget
        sd.cbLayerCheck.clear()
        
        for ltLayer in QgsProject.instance().layerTreeRoot().findLayers():
            evalue = evalLayerVariable(ltLayer.layer(), 'DMPManager')
            if evalue:
                evalue = evalue.split("¬§")
                if evalue[0]=="DATA": sd.cbLayerCheck.addItem(ltLayer.name(),[ltLayer,evalue[1],evalue[2]])
                
    def loadcbLayerStyle(self):
    
        sd = self.dockwidget
        sd.cbLayerStyle.clear()
        
        for ltLayer in QgsProject.instance().layerTreeRoot().findLayers():
            evalue = evalLayerVariable(ltLayer.layer(), 'DMPManager')
            if evalue:
                evalue = evalue.split("¬§")
                if evalue[0]=="DATA": sd.cbLayerStyle.addItem(ltLayer.name(),[ltLayer,evalue[1],evalue[2]])

    def loadCbDownload(self):
        """Load cbDownload combobox from attributes dict"""

        sa = self.attributes
        sd = self.dockwidget

        sd.cbDownload.clear()

        for d in sa['temakoder']:
            itm = d['attributes']
            itm['id'] = d['id']
            sd.cbDownload.addItem(d['id'] + ' - ' + d['attributes']['title'], itm)

        pref = '' if sd.lePrefLayer.text() is None else sd.lePrefLayer.text()
        if pref != "":
            sd.cbDownload.setCurrentIndex(sd.cbDownload.findText(pref))


    def createUriDict(self, tname, gname = 'geom', pkname='objekt-id'):

        sd = self.dockwidget
        
        udict = {}

        # find/check connectype and connection information
    
        # Database based local repository
        if sd.cbDatabase.currentIndex() >=0:

            setting = sd.cbDatabase.itemData(sd.cbDatabase.currentIndex())
            logI('setting0='+str(setting[0]))
            logI('setting1='+str(setting[1]))
            metadata = QgsProviderRegistry.instance().providerMetadata(setting[0])
            connection = metadata.findConnection(setting[1])
            logI('connuri='+str(connection.uri()))
            if setting[0] == 'ogr':
                uri = connection.uri()         
            else:
                uri = QgsDataSourceUri(connection.uri())
                if sd.cbSchema.currentIndex()>=0: uri.setSchema(sd.cbSchema.currentText())
                
                
            udict['uri'] = uri
            udict['gname'] = gname
            udict['pkname'] = pkname
            udict['tname'] = tname
            udict['contype'] = setting[0]

        else:
            messC(tr('Database connection is not set'))

        return udict

    def createUri(self, tname, gname = 'geom', pkname='objekt-id'):
    
        sd = self.dockwidget

        uristr = ''
        contype = ''
    
        # Database based local repository
        if sd.cbDatabase.currentIndex() >= 0:
            setting = sd.cbDatabase.itemData(sd.cbDatabase.currentIndex())
            contype = setting[0]
            metadata = QgsProviderRegistry.instance().providerMetadata(contype)
            connection = metadata.findConnection(setting[1])

            # create uri, database connection
            uri = QgsDataSourceUri(connection.uri())
            if sd.cbSchema.currentIndex() >= 0: uri.setSchema(sd.cbSchema.currentText())
            uri.setTable(tname)
            uri.setGeometryColumn(gname)
            uri.setKeyColumn(pkname)
            uristr = uri.uri()
        else:
            messC(tr('Database connection is not set'))

        return uristr, contype
 
    def pbDownloadClicked(self):
        """Fetch feature objects from DMP"""

        # Check password, perhaps show logon
        if self.checkToken():

            # set dict vars
            sd = self.dockwidget
            spa = self.parm["Access"][self.parm["Access_active"]]
            spc = self.parm["Commands"]
            spv = self.parm["Values"]
            spn = self.parm["Names"]
            spd = self.parm["Data"]
            spt = self.parm["Templates"]

            root = QgsProject.instance().layerTreeRoot()
            mprg = createGroup(spn["Global root"], root)
            mpag = createGroup(spn["Administration root"], mprg)
            spath = os.path.join(self.plugin_dir, 'templates')
    
            llog = self.setDmpLog()
            
            # theme number from combobox
            indx = sd.cbDownload.currentIndex()

            if indx >= 0:

                # find id + name + layername using combobox index
                val = sd.cbDownload.itemData(indx)

                udict = self.createUriDict(val['name'])

                if udict != {}:

                    # Create header information for requests
                    headers = copy.deepcopy(spa['Headers'])
                    headers['Authorization'] = headers['Authorization'].format(sd.leToken.text())
                    extent = mapperExtent(spv["EPSG code"]).asWkt() if sd.chbMapExtent.isChecked() else spv["Max extent"]
                    
                    cvrno = str(sd.cbCVRNo.itemData(sd.cbCVRNo.currentIndex())).strip() 
                    if  cvrno != '' and sd.chbUseCVR.isChecked():
                        url = spa['Address'] + spc['objekter'] + spc['objektfilter 3'].format(extent, val['id'], cvrno)
                    else:
                        url = spa['Address'] + spc['objekter'] + spc['objektfilter 1'].format(extent, val['id'])

                    logI ('I pbDownloadClicked, url='+url)

                    status, result = handleRequest(url, 'get', headers, None, llog, '')

                    # download OK
                    if status == 200:

                        ml = None
                        ll = []

                        title, ml, ll = createMemLayer(self.attributes, val['id'], 25832)
                        
                        if ml is not None:

                            for tt, le in ll.items():
                              
                                udict['tname'] = le.name() 
                                udict['gname'] = '' 
                                udict['pkname'] = ''
                                le2 = copyLayer2Layer(le, udict, True)
                                if le2: addLayer2Tree(mpag, le2, False, "DMPManager", "LOOKUP - " + le2.name(), os.path.join(spath, tt + '.qml'), tt)
                        
                            loadLayer(ml, result)

                            udict['tname'] = '{}_{}'.format(spa["Name"][:4].lower(), ml.name()) 
                            udict['gname'] = 'geom' 
                            udict['pkname'] = ''
                            ml2 = copyLayer2Layer(ml, udict, sd.chbOverwrite.isChecked())
                            if ml2: 
                                addLayer2Tree(mprg, ml2, False, "DMPManager","DATA¬§" + ml2.name() + "¬§" + str(val['id']), os.path.join(spath, val['title'] + '.qml'), title)
                                udict['tname'] = '{}_{}_{}'.format(spd['RefPrefix'], spa["Name"][:4].lower(), ml.name())  
                                ml3 = copyLayer2Layer(ml, udict, True)
                                
                                messI(tr('Creation of layer {} ({}) succeeded').format(title,ml.name())) 
                            else: 
                                messC(tr('Creation of layer {} ({}) failed. It might already exist').format(title,ml.name())) 

                        self.iface.mapCanvas().refreshAllLayers() 
    
                    else:

                        messC(tr('Error {} for download of {}').format(status, 'objekter'))

            else:
                messC(tr('Error, no selection of download layer'))

    def loadCbDatabase(self, dbTypes, dbItem, scItem):
        """Load cbDatabase combobox from main settings"""

        sd = self.dockwidget
        st = QSettings()
        spd = self.parm["Data"]

        sd.cbDatabase.clear()
        
#        for k in QgsProviderRegistry.instance().providerList():
        for k, v in dbTypes.items():
        
            try: # A ugly workaround for Oracle missing connection method

                metadata = QgsProviderRegistry.instance().providerMetadata(v[0])
                conn = metadata.connections(False)

                for c in conn:
                    sd.cbDatabase.addItem('{} - {}'.format(k, c), [v[0], c, v[1], v[2]])

                sd.cbDatabase.setCurrentIndex(sd.cbDatabase.findText(dbItem))
                sd.cbSchema.setCurrentIndex(sd.cbSchema.findText(scItem))

            except:
               messI(tr('Providertype: {} deprecated').format(k))                    


    def cbEnvironmentCurrentIndexChanged(self, index):

        sd = self.dockwidget

        if self.parm["Access_active"] and index >= 0:

            if self.parm["Access_active"] != sd.cbEnvironment.itemData(index):

                buttonReply = QMessageBox.question(None, tr('Change data environment...'), tr('You have chosen to change the data environment from:\n\n "{}" to "{}".\n\nIf you proceed, the QGIS application will be ended and you have to wait up to one hour for the DMP logon to timeout before working in the new data environment.\n\nProceed ?').format(self.parm["Access_active"], sd.cbEnvironment.itemData(index)), QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
                if buttonReply == QMessageBox.Yes:
                    messI(tr('DMP data environment will be changed from "{}" to "{}"').format(self.parm["Access_active"], sd.cbEnvironment.itemData(index)))
                    self.parm["Access_active"] = sd.cbEnvironment.itemData(index)
                    self.pbSaveClicked()
                    self.iface.actionExit().trigger()

                else:
                    messI(tr('DMP data environment will not be changed'))

    def cbDatabaseCurrentIndexChanged (self, index):

        sd = self.dockwidget
        sd.cbSchema.clear()
        
        if sd.cbDatabase.currentIndex() >=0:
            data = sd.cbDatabase.itemData(sd.cbDatabase.currentIndex())
            conns = QgsProviderRegistry.instance().providerMetadata(data[0]).connections(False)
            conn = conns[data[1]]

            sd.lePkName.setText(data[2])
            sd.lePkQuote.setText(data[3])

            sd.pbSchema.setEnabled(conn.capabilities() & QgsAbstractDatabaseProviderConnection.Schemas)
            if sd.pbSchema.isEnabled():
                for s in conn.schemas(): sd.cbSchema.addItem(s)


    def pbDatabaseClicked (self):
    
        sd = self.dockwidget
        spd = self.parm["Data"]

        self.loadCbDatabase(spd["Database_types"],sd.cbDatabase.currentText(), sd.cbSchema.currentText())

                
    def pbSchemaClicked (self):
    
        sd = self.dockwidget

        if sd.cbDatabase.currentIndex() >=0:
            data = sd.cbDatabase.itemData(sd.cbDatabase.currentIndex())
            conns = QgsProviderRegistry.instance().providerMetadata(data[0]).connections(False)
            conn = conns[data[1]]

            name , pressed = QInputDialog.getText(None, "Create new schema", "Schemaname: ", QLineEdit.Normal, "")
    
            if pressed: 
                try:
                    conn.createSchema(name)    
                    sd.cbSchema.addItem(name)
                    sd.cbSchema.setCurrentIndex(sd.cbSchema.findText(name))
                except:
                    messW(tr('Error, Schema {} not created').format(name))                    

        else:
            messW(tr('Database not set'))

    def lookupTemakoder(dtk, temanr):
        for d in dtk:
            if d["id"] == str(temanr):
                return d["attributes"]["title"], d["attributes"]["name"], d["attributes][geometry-type"]
        return None, None, None

