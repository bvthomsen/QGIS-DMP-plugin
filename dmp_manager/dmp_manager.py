# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DMPManager
                                 A QGIS plugin
 Manage data from Danmarmarks Miljøportal (DMP)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-12-08
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Bo Victor Thomsen, AestasGIS Danmark 
        email                : bvt@aestas.dk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *
from .helper import *

# Import the code for the DockWidget
from .dmp_manager_dockwidget import DMPManagerDockWidget
import os.path
import webbrowser


class DMPManager:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'DMPManager_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        trInit('DMPManager')

        # Declare instance attributes
        self.actions = []
        self.menu = tr(u'&DMP Manager')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'DMPManager')
        self.toolbar.setObjectName(u'DMPManager')

        #print "** INITIALIZING DMPManager"

        self.pluginIsActive = False
        self.dockwidget = None
 
    


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/dmp_manager/icon.png'
        self.add_action(
            icon_path,
            text=tr(u'DMP Manager'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        for action in self.actions:
            self.iface.removePluginWebMenu(
                tr(u'&DMP Manager'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = DMPManagerDockWidget()


            # Connect signals and slots for dockwidget
            self.dockwidget.pbReset.clicked.connect(self.pbResetClicked)  
            self.dockwidget.pbSave.clicked.connect(self.pbSaveClicked)  
            self.dockwidget.leToken.textChanged.connect(self.leTokenTextChanged)  
            self.dockwidget.pbReqToken.clicked.connect(self.pbReqTokenClicked)  
            self.dockwidget.pbPrefLayer.clicked.connect(self.pbPrefLayerClicked)  
            self.dockwidget.pbRefresh.clicked.connect(self.pbRefreshClicked)  

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

            # Set initial values
            self.pbResetClicked()


    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        self.pluginIsActive = False

    def pbResetClicked(self):
        """Reread configuration json file and set the self.parm dict"""

        self.parm = read_config(os.path.join(self.plugin_dir,'configuration.json'))
        self.attributes = read_config(os.path.join(self.plugin_dir,'attributes.json'))

        sd = self.dockwidget
        spv = self.parm["Values"]

        sd.leCVRNo.setText(str(spv["CVR number"]))
        sd.lePrefLayer.setText(spv["Preferred layer"])
        sd.rbMapExtent.setChecked(spv["Use extent"])
        sd.leToken.setText(spv["Token value"])
        sd.dtTimeout.setDateTime(QDateTime().fromString(spv["Token time"],Qt.ISODate))

        self.loadCbDownload()


    def pbSaveClicked(self):
        """Save values from several subwidgets into the self.parm dictionary and save it permanently into json file"""

        sd = self.dockwidget
        spv = self.parm["Values"]

        spv["CVR number"] = int(sd.leCVRNo.text())
        spv["Preferred layer"] = sd.lePrefLayer.text()
        spv["Use extent"] = sd.rbMapExtent.isChecked()
        spv["Token value"] = sd.leToken.text()
        spv["Token time"] = sd.dtTimeout.dateTime().toString(Qt.ISODate) 

        write_config(os.path.join(self.plugin_dir,'configuration.json'),self.parm)
        write_config(os.path.join(self.plugin_dir,'attributes.json'),self.attributes)

    def leTokenTextChanged (self,txt):
        """Set timeout parameter for token (current time + 1 hour)"""

        sd = self.dockwidget
        sd.dtTimeout.setDateTime(QDateTime.currentDateTime().addSecs(3500)) # "Næsten" 1 time

    def pbReqTokenClicked(self):
        """HTTP request to generate access ticket and token for DMP"""

        #sd = self.dockwidget
        spa = self.parm["Access"]
        webbrowser.open(spa['Logon'])

    def pbPrefLayerClicked(self):
        """Change preferred layerid to current value from cbDownload combobox item value"""

        spv = self.parm["Values"]
        sd = self.dockwidget

        spv = self.parm["Values"]
        sd = self.dockwidget
        ci = sd.cbDownload.currentIndex()
        if ci >= 0:
            spv["Preferred layer"] = sd.cbDownload.itemData(ci)['id']
            sd.lePrefLayer.setText(spv["Preferred layer"])

    def pbRefreshClicked(self):
        """Fetch all layer names and other information from DMP"""

        if self.checkToken():

            sa = self.attributes
            sd = self.dockwidget
            spa = self.parm["Access"]
            spc = self.parm["Commands"]

            # Create header information for requests
            headers = spa['Headers']
            headers['Authorization'] = headers['Authorization'].format(sd.leToken.text())
    
            url = spa['Address'] + spc['attributter']
            status, result = handleRequest (url, False, headers, None, None, '')
            if status == 200:
                sa['attributter'] = result['data']
            else:
                messC('Error {} for dowload of {}'.format(status,'attributter'))

            url = spa['Address'] + spc['temaattributter']
            status, result = handleRequest (url, False, headers, None, None, '')
            if status == 200:
                sa['temaattributter'] = result['data']
            else:
                messC('Error {} for dowload of {}'.format(status,'temaattributter'))

            url = spa['Address'] + spc['temakoder']
            status, result = handleRequest (url, False, headers, None, None, '')
            if status == 200:
                sa['temakoder'] = result['data']
                self.loadCbDownload()
            else:
                messC('Error {} for dowload of {}'.format(status,'temakoder'))
    
    def checkToken(self):
        """Check if token still is valid (not to old)"""

        sd = self.dockwidget
        spa = self.parm["Access"]
        if sd.dtTimeout.dateTime() < QDateTime.currentDateTime():
            # Missing code to start openId process....
            messW('Timeout for token - refresh token using logon at DMP')
            webbrowser.open(spa['Logon'])
            return False
        
        return True

    def loadCbDownload(self):
        """Load cbDownload combobox from attributes dict"""

        sa = self.attributes
        sd = self.dockwidget

        pref = '' if sd.lePrefLayer.text() is None else sd.lePrefLayer.text() 

        sd.cbDownload.clear()
        cndx = 0
        indx = 0

        for d in sa['temakoder']: 
            sd.cbDownload.addItem(d['id'] + ' - '+ d['attributes']['title'],d)
            if pref == d['id']: cndx = indx
            indx +=1
        
        sd.cbDownload.setCurrentIndex(cndx)